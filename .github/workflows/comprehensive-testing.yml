name: Comprehensive QA Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run full test suite daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'regression'
        type: choice
        options:
        - smoke
        - regression
        - full
        - performance
        - security
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - development
        - staging
        - production

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/ms-playwright

jobs:
  # Job 1: Setup and Validation
  setup:
    name: Setup and Validation
    runs-on: ubuntu-latest
    outputs:
      test-suite: ${{ steps.determine-suite.outputs.suite }}
      should-run-performance: ${{ steps.determine-suite.outputs.performance }}
      should-run-security: ${{ steps.determine-suite.outputs.security }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Validate project structure
        run: |
          echo "Validating project structure..."
          test -f package.json || exit 1
          test -d automated-tests || exit 1
          test -d scripts || exit 1
          echo "‚úÖ Project structure validated"

      - name: Determine test suite
        id: determine-suite
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            SUITE="${{ github.event.inputs.test_suite }}"
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            SUITE="full"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            SUITE="regression"
          else
            SUITE="smoke"
          fi
          
          echo "suite=$SUITE" >> $GITHUB_OUTPUT
          echo "performance=$([[ "$SUITE" == "full" || "$SUITE" == "performance" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "security=$([[ "$SUITE" == "full" || "$SUITE" == "security" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          
          echo "üéØ Test suite determined: $SUITE"

  # Job 2: Smoke Tests (Fast feedback)
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.test-suite == 'smoke' || needs.setup.outputs.test-suite == 'regression' || needs.setup.outputs.test-suite == 'full'
    strategy:
      matrix:
        browser: [chromium]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run smoke tests
        run: |
          npm run test:ci:smoke
        env:
          BROWSER: ${{ matrix.browser }}
          CI: true

      - name: Upload smoke test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: smoke-test-results-${{ matrix.browser }}
          path: |
            reports/
            test-results/
            playwright-report/
          retention-days: 7

  # Job 3: UI Tests (Multi-browser)
  ui-tests:
    name: UI Tests
    runs-on: ubuntu-latest
    needs: [setup, smoke-tests]
    if: needs.setup.outputs.test-suite == 'regression' || needs.setup.outputs.test-suite == 'full'
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run UI tests
        run: |
          npm run test:ui -- --project=${{ matrix.browser }}
        env:
          BROWSER: ${{ matrix.browser }}
          CI: true

      - name: Upload UI test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ui-test-results-${{ matrix.browser }}
          path: |
            reports/
            test-results/
            playwright-report/
          retention-days: 7

  # Job 4: API Tests
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: [setup, smoke-tests]
    if: needs.setup.outputs.test-suite == 'regression' || needs.setup.outputs.test-suite == 'full'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run API tests
        run: |
          npm run test:api:comprehensive
        env:
          CI: true

      - name: Upload API test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-results
          path: |
            reports/api-tests/
            reports/newman/
          retention-days: 7

  # Job 5: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [setup, smoke-tests]
    if: needs.setup.outputs.should-run-performance == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup JMeter
        run: |
          wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.2.tgz
          tar -xzf apache-jmeter-5.6.2.tgz
          echo "${{ github.workspace }}/apache-jmeter-5.6.2/bin" >> $GITHUB_PATH

      - name: Run performance tests
        run: |
          npm run test:performance:advanced
        env:
          CI: true
          JMETER_HOME: ${{ github.workspace }}/apache-jmeter-5.6.2

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            reports/performance-tests/
            automated-tests/performance-tests/jmeter/results/
          retention-days: 7

  # Job 6: Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [setup, smoke-tests]
    if: needs.setup.outputs.should-run-security == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run security tests
        run: |
          npm run test:security
        env:
          CI: true

      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: |
            reports/security-tests/
            test-results/
          retention-days: 7

  # Job 7: Test Result Aggregation
  aggregate-results:
    name: Aggregate Results and Generate Reports
    runs-on: ubuntu-latest
    needs: [setup, smoke-tests, ui-tests, api-tests, performance-tests, security-tests]
    if: always() && needs.setup.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Aggregate test results
        run: |
          echo "üìä Aggregating test results..."
          npm run test:aggregate
          npm run report:consolidated
        env:
          CI: true

      - name: Generate test summary
        run: |
          echo "# üéØ Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Suite:** ${{ needs.setup.outputs.test-suite }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add job status summary
          echo "## Job Status" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Smoke Tests | ${{ needs.smoke-tests.result == 'success' && '‚úÖ Passed' || needs.smoke-tests.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| UI Tests | ${{ needs.ui-tests.result == 'success' && '‚úÖ Passed' || needs.ui-tests.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| API Tests | ${{ needs.api-tests.result == 'success' && '‚úÖ Passed' || needs.api-tests.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-tests.result == 'success' && '‚úÖ Passed' || needs.performance-tests.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Tests | ${{ needs.security-tests.result == 'success' && '‚úÖ Passed' || needs.security-tests.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY

      - name: Upload consolidated reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: consolidated-test-reports
          path: |
            reports/
            artifacts/
          retention-days: 30

      - name: Deploy reports to GitHub Pages
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./reports/consolidated
          destination_dir: test-reports