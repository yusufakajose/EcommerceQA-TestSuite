name: Comprehensive QA Testing Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run full test suite daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'regression'
        type: choice
        options:
          - smoke
          - regression
          - full
          - performance
          - security
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/.cache/ms-playwright

jobs:
  # Job 1: Setup and Validation
  setup:
    name: Setup and Validation
    runs-on: ubuntu-latest
    outputs:
      test-suite: ${{ steps.determine-suite.outputs.suite }}
      should-run-performance: ${{ steps.determine-suite.outputs.performance }}
      should-run-security: ${{ steps.determine-suite.outputs.security }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
      - name: Cache Playwright browsers
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-
      - name: Install Playwright browsers
        run: |
          npx playwright install --with-deps

      - name: Run CI health check
        run: |
          npm run ci:health-check

      - name: Initialize test monitoring
        run: |
          npm run ci:monitor init

      - name: Validate project structure
        run: |
          echo "Validating project structure..."

          # Check required files
          if [ ! -f package.json ]; then
            echo "package.json not found"
            exit 1
          fi

          if [ ! -d automated-tests ]; then
            echo "automated-tests directory not found"
            exit 1
          fi

          if [ ! -d scripts ]; then
            echo "scripts directory not found"
            exit 1
          fi

          # Check configuration files
          if [ ! -f .eslintrc.js ]; then
            echo "ESLint configuration not found"
          fi

          if [ ! -f tsconfig.json ]; then
            echo "TypeScript configuration not found"
          fi

          echo "Project structure validated"

      - name: Run code quality checks
        run: |
          echo "Running code quality checks..."

          # Linting
          if npm run lint:check; then
            echo "Linting passed"
          else
            echo "Linting issues found"
            npm run lint || echo "Auto-fix failed"
          fi

          # Type checking
          if npm run type-check; then
            echo "Type checking passed"
          else
            echo "Type checking failed"
          fi

          # Security audit
          echo "Running security audit (high/critical will fail the job)..."
          npm audit --audit-level=high

      - name: Determine test suite
        id: determine-suite
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            SUITE="${{ github.event.inputs.test_suite }}"
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            SUITE="full"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            SUITE="regression"
          else
            SUITE="smoke"
          fi

          echo "suite=$SUITE" >> $GITHUB_OUTPUT
          echo "performance=$([[ "$SUITE" == "full" || "$SUITE" == "performance" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "security=$([[ "$SUITE" == "full" || "$SUITE" == "security" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT

          echo "Test suite determined: $SUITE"

  # Job 2: Build and Compile
  build:
    name: Build and Compile
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
      - name: Cache Playwright browsers
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Build TypeScript
        run: |
          echo "Building TypeScript..."
          if npm run build; then
            echo "Build successful"
          else
            echo "Build failed"
            exit 1
          fi

      - name: Validate test configurations
        run: |
          echo "Validating test configurations..."

          # Check Playwright config
          if [ -f config/playwright.config.js ]; then
            echo "Playwright configuration found"
          else
            echo "Playwright configuration missing"
            exit 1
          fi

          # Check Postman collections
          if [ -d config/postman/collections ]; then
            echo "Postman collections found"
          else
            echo "Postman collections not found"
          fi

          # Validate npm scripts
          echo "Validating npm scripts..."
          npm run --silent 2>/dev/null | grep -E "(test:|lint|build)" || echo "Some test scripts may be missing"

      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: build-artifacts
          path: |
            dist/
            node_modules/.cache/
          retention-days: 1

  # Job 3: Smoke Tests (Fast feedback)
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.test-suite == 'smoke' || needs.setup.outputs.test-suite == 'regression' || needs.setup.outputs.test-suite == 'full'
    strategy:
      matrix:
        browser: [chromium]
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
      - name: Cache Playwright browsers
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-
      - name: Install Playwright browsers
        run: |
          npx playwright install --with-deps

      - name: Run smoke tests
        run: |
          echo "ðŸ§ª Running smoke tests with ${{ matrix.browser }}..."

          # Create reports directory
          mkdir -p reports/smoke-tests

          # Run smoke tests with error handling
          if npm run test:ci:smoke; then
            echo "Smoke tests passed"
          else
            echo "Smoke tests failed"
            exit 1
          fi
        env:
          BROWSER: ${{ matrix.browser }}
          CI: true
          PLAYWRIGHT_HTML_REPORT: reports/smoke-tests/playwright-report

      - name: Upload Playwright traces on failure
        if: failure()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: traces-smoke-${{ matrix.browser }}
          path: |
            test-results/
            reports/test-execution/**/playwright-report/
          retention-days: 7

      - name: Upload smoke test results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        if: always()
        with:
          name: smoke-test-results-${{ matrix.browser }}
          path: |
            reports/
            test-results/
            playwright-report/
          retention-days: 7

  # Job 3: UI Tests (Multi-browser)
  ui-tests:
    name: UI Tests
    runs-on: ubuntu-latest
    needs: [setup, build, smoke-tests]
    if: needs.setup.outputs.test-suite == 'regression' || needs.setup.outputs.test-suite == 'full'
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
      - name: Cache Playwright browsers
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-
      - name: Install Playwright browsers
        run: |
          npx playwright install --with-deps

      - name: Run UI tests
        run: |
          echo "ðŸ§ª Running UI tests with ${{ matrix.browser }}..."

          # Create reports directory
          mkdir -p reports/ui-tests/${{ matrix.browser }}

          # Run UI tests with retry logic
          RETRY_COUNT=0
          MAX_RETRIES=2

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if npm run test:ui -- --project=${{ matrix.browser }}; then
              echo "UI tests passed on attempt $((RETRY_COUNT + 1))"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "UI tests failed on attempt $RETRY_COUNT, retrying..."
                sleep 10
              else
                echo "UI tests failed after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done
        env:
          BROWSER: ${{ matrix.browser }}
          CI: true
          PLAYWRIGHT_HTML_REPORT: reports/ui-tests/${{ matrix.browser }}/playwright-report

      - name: Upload Playwright traces on failure
        if: failure()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: traces-ui-${{ matrix.browser }}
          path: |
            test-results/
            reports/test-execution/**/playwright-report/
          retention-days: 7

      - name: Upload UI test results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        if: always()
        with:
          name: ui-test-results-${{ matrix.browser }}
          path: |
            reports/
            test-results/
            playwright-report/
          retention-days: 7

  # Job 4: API Tests
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: [setup, build, smoke-tests]
    if: needs.setup.outputs.test-suite == 'regression' || needs.setup.outputs.test-suite == 'full'
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
      - name: Cache Playwright browsers
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Run API tests
        run: |
          echo "ðŸ§ª Running comprehensive API tests..."

          # Create reports directory
          mkdir -p reports/api-tests

          # Validate API test setup
          if npm run test:api:validate; then
            echo "API test setup validated"
          else
            echo "API test setup validation failed, continuing anyway..."
          fi

          # Run API tests
          if npm run test:api:comprehensive; then
            echo "API tests passed"
          else
            echo "API tests failed"
            exit 1
          fi
        env:
          CI: true
          TEST_ENV: staging

      - name: Upload API test results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        if: always()
        with:
          name: api-test-results
          path: |
            reports/api-tests/
            reports/newman/
          retention-days: 7

  # Job 5: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [setup, build, smoke-tests]
    if: needs.setup.outputs.should-run-performance == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup JMeter
        run: |
          wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.2.tgz
          tar -xzf apache-jmeter-5.6.2.tgz
          echo "${{ github.workspace }}/apache-jmeter-5.6.2/bin" >> $GITHUB_PATH

      - name: Setup k6 (apt)
        run: |
          sudo apt-get update
          sudo apt-get install -y gpg curl
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install -y k6

      - name: Run k6 smoke performance (SLO-gated)
        run: |
          mkdir -p reports/load-tests/k6
          npm run test:load:k6:smoke
        env:
          CI: true
          BASE_URL: https://www.saucedemo.com

      - name: Aggregate k6 JUnit results
        if: always()
        run: |
          npm run report:k6:junit:aggregate || true
        shell: bash

      - name: Run JMeter performance (SLO-gated)
        run: |
          node automated-tests/performance-tests/scripts/jmeter-runner.js --users 20 --ramp-up 30 --loops 2
        env:
          CI: true
          JMETER_HOME: ${{ github.workspace }}/apache-jmeter-5.6.2

      - name: Upload performance test results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        if: always()
        with:
          name: performance-test-results
          path: |
            reports/performance-tests/
            reports/load-tests/
            automated-tests/performance-tests/jmeter/results/
          retention-days: 7

      - name: Add performance summary to Job Summary
        if: always()
        run: |
          echo "## Performance SLO Summary" >> $GITHUB_STEP_SUMMARY
          if [ -f reports/load-tests/k6/smoke-summary.json ]; then
            echo "### k6" >> $GITHUB_STEP_SUMMARY
            cat reports/load-tests/k6/smoke-summary.json | jq -r '"- Status: \(.status)\n- Total Requests: \(.metrics.total_requests)\n- Error Rate: \(.metrics.error_rate)\n- p95: \(.metrics.http_req_duration.p95) ms\n- p99: \(.metrics.http_req_duration.p99) ms"' >> $GITHUB_STEP_SUMMARY || true
          fi
          if [ -d reports/performance-tests/summaries ]; then
            for f in reports/performance-tests/summaries/*-summary.json; do
              [ -e "$f" ] || continue
              NAME=$(basename "$f" | sed 's/-summary.json//')
              echo "### JMeter - ${NAME}" >> $GITHUB_STEP_SUMMARY
              cat "$f" | jq -r '"- Status: \(.status)\n- Samples: \(.totals.samples)\n- Error %: \(.totals.error_percentage)%\n- p95: \(.latency_ms.p95) ms\n- p99: \(.latency_ms.p99) ms"' >> $GITHUB_STEP_SUMMARY || true
            done
          fi
        shell: bash

  # Job 6: Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [setup, build, smoke-tests]
    if: needs.setup.outputs.should-run-security == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup k6 (apt)
        run: |
          sudo apt-get update
          sudo apt-get install -y gpg curl
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install -y k6
      - name: Install Playwright browsers
        run: |
          npx playwright install --with-deps

      - name: Run security tests
        run: |
          npm run test:security
        env:
          CI: true

      - name: Upload Playwright traces on failure
        if: failure()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: traces-security
          path: |
            test-results/
            reports/test-execution/**/playwright-report/
          retention-days: 7

      - name: Upload security test results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        if: always()
        with:
          name: security-test-results
          path: |
            reports/security-tests/
            test-results/
          retention-days: 7

  # Job 7: Test Result Aggregation
  aggregate-results:
    name: Aggregate Results and Generate Reports
    runs-on: ubuntu-latest
    needs: [setup, build, smoke-tests, ui-tests, api-tests, performance-tests, security-tests]
    if: always() && needs.setup.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
      - name: Cache Playwright browsers
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: ${{ env.PLAYWRIGHT_BROWSERS_PATH }}
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Download all artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16
        with:
          path: artifacts/

      - name: Aggregate test results
        run: |
          echo "Aggregating test results..."
          npm run test:aggregate
          npm run report:consolidated
        env:
          CI: true

      - name: Generate test summary
        run: |
          echo "# Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Suite:** ${{ needs.setup.outputs.test-suite }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Add job status summary
          echo "## Job Status" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Smoke Tests | ${{ needs.smoke-tests.result == 'success' && 'Passed' || needs.smoke-tests.result == 'skipped' && 'Skipped' || 'Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| UI Tests | ${{ needs.ui-tests.result == 'success' && 'Passed' || needs.ui-tests.result == 'skipped' && 'Skipped' || 'Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| API Tests | ${{ needs.api-tests.result == 'success' && 'Passed' || needs.api-tests.result == 'skipped' && 'Skipped' || 'Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-tests.result == 'success' && 'Passed' || needs.performance-tests.result == 'skipped' && 'Skipped' || 'Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Tests | ${{ needs.security-tests.result == 'success' && 'Passed' || needs.security-tests.result == 'skipped' && 'Skipped' || 'Failed' }} |" >> $GITHUB_STEP_SUMMARY

          # Append Top Flaky Specs (from history, if available)
          node -e '
          const fs = require("fs");
          const path = require("path");
          const histPath = path.join("reports","test-execution","development","flakes-history.json");
          try {
            if (fs.existsSync(histPath)) {
              const hist = JSON.parse(fs.readFileSync(histPath, "utf8"));
              if (Array.isArray(hist) && hist.length) {
                /** @type {Record<string, {file:string,count:number,tests:Set<string>,lastSeen:number,totalAttempts:number}>} */
                const byFile = {};
                for (const entry of hist) {
                  const ts = Date.parse((entry && entry.timestamp) || "") || 0;
                  const tests = (entry && entry.flakyTests) || [];
                  for (const t of tests) {
                    const file = (t && t.file) || "unknown";
                    byFile[file] ||= { file, count: 0, tests: new Set(), lastSeen: 0, totalAttempts: 0 };
                    byFile[file].count += 1;
                    if (t && t.title) byFile[file].tests.add(t.title);
                    if (t && typeof t.attempts === "number") byFile[file].totalAttempts += t.attempts;
                    if (ts && ts > byFile[file].lastSeen) byFile[file].lastSeen = ts;
                  }
                }
                const top = Object.values(byFile)
                  .sort((a,b) => b.count - a.count || b.totalAttempts - a.totalAttempts || b.lastSeen - a.lastSeen)
                  .slice(0,5);
                if (top.length) {
                  const lines = [];
                  lines.push("\n## Top flaky specs (last runs)\n");
                  lines.push("| Spec file | Flaky occurrences | Distinct tests | Avg attempts | Last seen |");
                  lines.push("|---|---:|---:|---:|---|");
                  for (const item of top) {
                    const avgAttempts = item.count ? (item.totalAttempts / item.count) : 0;
                    const last = item.lastSeen ? new Date(item.lastSeen).toISOString() : "";
                    lines.push(`| ${item.file} | ${item.count} | ${item.tests.size} | ${avgAttempts.toFixed(2)} | ${last} |`);
                  }
                  fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, lines.join("\n") + "\n");
                }
              }
            }
          } catch (_) {}
          '

      - name: Upload consolidated reports
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        if: always()
        with:
          name: consolidated-test-reports
          path: |
            reports/
            artifacts/
          retention-days: 30
