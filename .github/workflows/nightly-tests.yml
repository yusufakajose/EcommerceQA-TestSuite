name: Nightly Test Suite

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for testing'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      include_performance:
        description: 'Include performance tests'
        required: true
        default: true
        type: boolean
      include_security:
        description: 'Include security tests'
        required: true
        default: true
        type: boolean

env:
  NODE_VERSION: '18'

jobs:
  nightly-full-suite:
    name: Nightly Full Test Suite
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        environment: [staging]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run comprehensive UI tests
        run: |
          npm run test:ui:comprehensive -- --project=${{ matrix.browser }}
        env:
          TEST_ENV: ${{ matrix.environment }}
          BROWSER: ${{ matrix.browser }}
          CI: true
          NIGHTLY: true

      - name: Run API regression tests
        run: |
          npm run test:api:regression
        env:
          TEST_ENV: ${{ matrix.environment }}
          CI: true

      - name: Run accessibility tests
        run: |
          npm run test:accessibility
        env:
          CI: true

      - name: Upload nightly test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: nightly-results-${{ matrix.browser }}-${{ matrix.environment }}
          path: |
            reports/
            test-results/
            playwright-report/
          retention-days: 14

  performance-tests:
    name: Nightly Performance Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.include_performance != 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup JMeter
        run: |
          wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.2.tgz
          tar -xzf apache-jmeter-5.6.2.tgz
          echo "${{ github.workspace }}/apache-jmeter-5.6.2/bin" >> $GITHUB_PATH

      - name: Run performance tests
        run: |
          npm run test:performance:nightly
        env:
          CI: true
          JMETER_HOME: ${{ github.workspace }}/apache-jmeter-5.6.2
          TEST_ENV: ${{ github.event.inputs.environment || 'staging' }}

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: nightly-performance-results
          path: |
            reports/performance-tests/
            automated-tests/performance-tests/jmeter/results/
          retention-days: 14

  security-tests:
    name: Nightly Security Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.include_security != 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run security tests
        run: |
          npm run test:security:comprehensive
        env:
          CI: true
          TEST_ENV: ${{ github.event.inputs.environment || 'staging' }}

      - name: Upload security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: nightly-security-results
          path: |
            reports/security-tests/
            test-results/
          retention-days: 14

  generate-nightly-report:
    name: Generate Nightly Report
    runs-on: ubuntu-latest
    needs: [nightly-full-suite, performance-tests, security-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: nightly-artifacts/

      - name: Generate consolidated nightly report
        run: |
          echo "ðŸ“Š Generating nightly test report..."
          npm run report:nightly
        env:
          CI: true

      - name: Upload consolidated nightly report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: nightly-consolidated-report
          path: |
            reports/nightly/
            nightly-artifacts/
          retention-days: 30



      - name: Send notification on failure
        if: failure()
        run: |
          echo "ðŸš¨ Nightly test suite failed!"
          echo "Check the workflow logs for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          # Here you would integrate with notification systems like Slack, email, etc.