# Azure DevOps Pipeline for QA Testing Showcase
# This file provides CI/CD configuration for Azure DevOps users

trigger:
  branches:
    include:
    - main
    - develop
  paths:
    exclude:
    - README.md
    - docs/*

pr:
  branches:
    include:
    - main
    - develop

schedules:
- cron: "0 2 * * *"
  displayName: Nightly test run
  branches:
    include:
    - main
  always: true

variables:
  nodeVersion: '18.x'
  playwrightVersion: '1.40.0'

stages:
- stage: Validate
  displayName: 'Validation Stage'
  jobs:
  - job: ProjectValidation
    displayName: 'Project Structure Validation'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'
    
    - task: Npm@1
      inputs:
        command: 'ci'
      displayName: 'Install dependencies'
    
    - script: |
        echo "üîç Validating project structure..."
        test -f package.json || exit 1
        test -d automated-tests || exit 1
        test -d scripts || exit 1
        echo "‚úÖ Project structure validated"
      displayName: 'Validate project structure'
    
    - script: |
        npm run lint || echo "Linting completed with warnings"
        npm audit --audit-level=high || echo "Security audit completed"
      displayName: 'Code quality checks'

- stage: SmokeTests
  displayName: 'Smoke Tests'
  dependsOn: Validate
  condition: succeeded()
  jobs:
  - job: SmokeTestExecution
    displayName: 'Execute Smoke Tests'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'
    
    - task: Npm@1
      inputs:
        command: 'ci'
      displayName: 'Install dependencies'
    
    - script: |
        npx playwright install --with-deps
      displayName: 'Install Playwright browsers'
    
    - script: |
        npm run test:ci:smoke
      displayName: 'Run smoke tests'
      env:
        CI: true
    
    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'reports/junit.xml'
        testRunTitle: 'Smoke Tests'
    
    - task: PublishHtmlReport@1
      condition: always()
      inputs:
        reportDir: 'playwright-report'
        tabName: 'Smoke Test Report'

- stage: UITests
  displayName: 'UI Tests'
  dependsOn: SmokeTests
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.Reason'], 'Schedule')))
  jobs:
  - job: UITestExecution
    displayName: 'Execute UI Tests'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      matrix:
        Chromium:
          browserName: 'chromium'
        Firefox:
          browserName: 'firefox'
        WebKit:
          browserName: 'webkit'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'
    
    - task: Npm@1
      inputs:
        command: 'ci'
      displayName: 'Install dependencies'
    
    - script: |
        npx playwright install --with-deps
      displayName: 'Install Playwright browsers'
    
    - script: |
        npm run test:ui -- --project=$(browserName)
      displayName: 'Run UI tests - $(browserName)'
      env:
        CI: true
        BROWSER: $(browserName)
    
    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'reports/junit-$(browserName).xml'
        testRunTitle: 'UI Tests - $(browserName)'
    
    - task: PublishHtmlReport@1
      condition: always()
      inputs:
        reportDir: 'playwright-report'
        tabName: 'UI Test Report - $(browserName)'

- stage: APITests
  displayName: 'API Tests'
  dependsOn: SmokeTests
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.Reason'], 'Schedule')))
  jobs:
  - job: APITestExecution
    displayName: 'Execute API Tests'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'
    
    - task: Npm@1
      inputs:
        command: 'ci'
      displayName: 'Install dependencies'
    
    - script: |
        npm run test:api:comprehensive
      displayName: 'Run API tests'
      env:
        CI: true
    
    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'reports/api-tests/junit.xml'
        testRunTitle: 'API Tests'
    
    - task: PublishHtmlReport@1
      condition: always()
      inputs:
        reportDir: 'reports/newman'
        tabName: 'API Test Report'

- stage: PerformanceTests
  displayName: 'Performance Tests'
  dependsOn: SmokeTests
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.Reason'], 'Schedule')))
  jobs:
  - job: PerformanceTestExecution
    displayName: 'Execute Performance Tests'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'
    
    - task: Npm@1
      inputs:
        command: 'ci'
      displayName: 'Install dependencies'
    
    - script: |
        wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.2.tgz
        tar -xzf apache-jmeter-5.6.2.tgz
        echo "##vso[task.setvariable variable=JMETER_HOME]$(Agent.BuildDirectory)/apache-jmeter-5.6.2"
        echo "##vso[task.prependpath]$(Agent.BuildDirectory)/apache-jmeter-5.6.2/bin"
      displayName: 'Setup JMeter'
    
    - script: |
        npm run test:performance:advanced
      displayName: 'Run performance tests'
      env:
        CI: true
        JMETER_HOME: $(JMETER_HOME)
    
    - task: PublishHtmlReport@1
      condition: always()
      inputs:
        reportDir: 'reports/performance-tests'
        tabName: 'Performance Test Report'

- stage: SecurityTests
  displayName: 'Security Tests'
  dependsOn: SmokeTests
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.Reason'], 'Schedule')))
  jobs:
  - job: SecurityTestExecution
    displayName: 'Execute Security Tests'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'
    
    - task: Npm@1
      inputs:
        command: 'ci'
      displayName: 'Install dependencies'
    
    - script: |
        npx playwright install --with-deps
      displayName: 'Install Playwright browsers'
    
    - script: |
        npm run test:security
      displayName: 'Run security tests'
      env:
        CI: true
    
    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'reports/security-tests/junit.xml'
        testRunTitle: 'Security Tests'
    
    - task: PublishHtmlReport@1
      condition: always()
      inputs:
        reportDir: 'reports/security-tests'
        tabName: 'Security Test Report'

- stage: ReportGeneration
  displayName: 'Generate Consolidated Reports'
  dependsOn: 
  - UITests
  - APITests
  - PerformanceTests
  - SecurityTests
  condition: always()
  jobs:
  - job: ConsolidatedReporting
    displayName: 'Generate Consolidated Reports'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(nodeVersion)
      displayName: 'Install Node.js'
    
    - task: Npm@1
      inputs:
        command: 'ci'
      displayName: 'Install dependencies'
    
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'all'
        downloadPath: '$(System.ArtifactsDirectory)'
      displayName: 'Download all test artifacts'
    
    - script: |
        echo "üìä Aggregating test results..."
        npm run test:aggregate
        npm run report:consolidated
      displayName: 'Generate consolidated reports'
      env:
        CI: true
    
    - task: PublishHtmlReport@1
      condition: always()
      inputs:
        reportDir: 'reports/consolidated'
        tabName: 'Consolidated Test Dashboard'
    
    - task: PublishBuildArtifacts@1
      condition: always()
      inputs:
        pathToPublish: 'reports'
        artifactName: 'ConsolidatedReports'
        publishLocation: 'Container'