{
  "info": {
    "name": "Enhanced E-commerce User Management API",
    "description": "Comprehensive API tests for user management functionality with extensive positive and negative test scenarios",
    "version": "2.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "{{base_url}}",
      "type": "string"
    },
    {
      "key": "api_version",
      "value": "v1",
      "type": "string"
    },
    {
      "key": "test_user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "test_email",
      "value": "test@example.com",
      "type": "string"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Global pre-request script for user management tests",
          "console.log('Starting User Management API Test: ' + pm.info.requestName);",
          "",
          "// Set dynamic test data",
          "const timestamp = Date.now();",
          "pm.globals.set('timestamp', timestamp);",
          "pm.globals.set('random_email', `test${timestamp}@example.com`);",
          "pm.globals.set('random_username', `testuser${timestamp}`);",
          "",
          "// Set request headers",
          "pm.request.headers.add({",
          "    key: 'Content-Type',",
          "    value: 'application/json'",
          "});",
          "",
          "pm.request.headers.add({",
          "    key: 'Accept',",
          "    value: 'application/json'",
          "});",
          "",
          "// Add request ID for tracing",
          "pm.request.headers.add({",
          "    key: 'X-Request-ID',",
          "    value: pm.globals.get('timestamp')",
          "});"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "Authentication Tests",
      "description": "Comprehensive user authentication test scenarios",
      "item": [
        {
          "name": "User Registration - Valid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test response status",
                  "pm.test('Status code is 201 Created', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Test response time",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "// Test response structure",
                  "pm.test('Response has correct structure', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('user');",
                  "    pm.expect(responseJson.data).to.have.property('token');",
                  "});",
                  "",
                  "// Test user data",
                  "pm.test('User data is correct', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const user = responseJson.data.user;",
                  "    ",
                  "    pm.expect(user).to.have.property('id');",
                  "    pm.expect(user).to.have.property('email');",
                  "    pm.expect(user).to.have.property('username');",
                  "    pm.expect(user).to.have.property('firstName');",
                  "    pm.expect(user).to.have.property('lastName');",
                  "    pm.expect(user).to.have.property('role', 'customer');",
                  "    pm.expect(user).to.have.property('isActive', true);",
                  "    pm.expect(user).to.have.property('createdAt');",
                  "    ",
                  "    // Validate email format",
                  "    pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
                  "    ",
                  "    // Ensure password is not returned",
                  "    pm.expect(user).to.not.have.property('password');",
                  "});",
                  "",
                  "// Test token",
                  "pm.test('Authentication token is valid', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const token = responseJson.data.token;",
                  "    ",
                  "    pm.expect(token).to.be.a('string');",
                  "    pm.expect(token.length).to.be.greaterThan(10);",
                  "    ",
                  "    // Store token for subsequent requests",
                  "    pm.globals.set('auth_token', token);",
                  "    pm.globals.set('test_user_id', responseJson.data.user.id);",
                  "});",
                  "",
                  "// Test security headers",
                  "pm.test('Security headers are present', function () {",
                  "    pm.expect(pm.response.headers.get('X-Content-Type-Options')).to.eql('nosniff');",
                  "    pm.expect(pm.response.headers.get('X-Frame-Options')).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"email\\\": \\\"{{random_email}}\\\",\\n  \\\"username\\\": \\\"{{random_username}}\\\",\\n  \\\"password\\\": \\\"SecurePass123!\\\",\\n  \\\"confirmPassword\\\": \\\"SecurePass123!\\\",\\n  \\\"firstName\\\": \\\"John\\\",\\n  \\\"lastName\\\": \\\"Doe\\\",\\n  \\\"dateOfBirth\\\": \\\"1990-01-01\\\",\\n  \\\"phoneNumber\\\": \\\"+1234567890\\\",\\n  \\\"acceptTerms\\\": true\\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "register"]
            }
          }
        },
        {
          "name": "User Registration - Invalid Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 Bad Request', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message indicates invalid email', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "    pm.expect(responseJson.error.message).to.include('email');",
                  "});",
                  "",
                  "pm.test('Validation errors are detailed', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.error).to.have.property('details');",
                  "    pm.expect(responseJson.error.details).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"email\\\": \\\"invalid-email\\\",\\n  \\\"username\\\": \\\"testuser\\\",\\n  \\\"password\\\": \\\"SecurePass123!\\\",\\n  \\\"confirmPassword\\\": \\\"SecurePass123!\\\",\\n  \\\"firstName\\\": \\\"John\\\",\\n  \\\"lastName\\\": \\\"Doe\\\"\\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "register"]
            }
          }
        },
        {
          "name": "User Registration - Weak Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 Bad Request', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message indicates weak password', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson.error.message).to.include('password');",
                  "});",
                  "",
                  "pm.test('Password requirements are specified', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.error.details).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"email\\\": \\\"test@example.com\\\",\\n  \\\"username\\\": \\\"testuser\\\",\\n  \\\"password\\\": \\\"123\\\",\\n  \\\"confirmPassword\\\": \\\"123\\\",\\n  \\\"firstName\\\": \\\"John\\\",\\n  \\\"lastName\\\": \\\"Doe\\\"\\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "register"]
            }
          }
        },
        {
          "name": "User Registration - Password Mismatch",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 Bad Request', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message indicates password mismatch', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson.error.message).to.include('password');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"email\\\": \\\"test@example.com\\\",\\n  \\\"username\\\": \\\"testuser\\\",\\n  \\\"password\\\": \\\"SecurePass123!\\\",\\n  \\\"confirmPassword\\\": \\\"DifferentPass123!\\\",\\n  \\\"firstName\\\": \\\"John\\\",\\n  \\\"lastName\\\": \\\"Doe\\\"\\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "register"]
            }
          }
        },
        {
          "name": "User Login - Valid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 OK', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1500);",
                  "});",
                  "",
                  "pm.test('Authentication successful', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('token');",
                  "    pm.expect(responseJson.data).to.have.property('user');",
                  "    pm.expect(responseJson.data).to.have.property('expiresIn');",
                  "});",
                  "",
                  "pm.test('Token is valid JWT format', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const token = responseJson.data.token;",
                  "    ",
                  "    // JWT has 3 parts separated by dots",
                  "    const tokenParts = token.split('.');",
                  "    pm.expect(tokenParts).to.have.lengthOf(3);",
                  "    ",
                  "    // Store token for subsequent requests",
                  "    pm.globals.set('auth_token', token);",
                  "});",
                  "",
                  "pm.test('User data excludes sensitive information', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const user = responseJson.data.user;",
                  "    ",
                  "    pm.expect(user).to.not.have.property('password');",
                  "    pm.expect(user).to.not.have.property('passwordHash');",
                  "    pm.expect(user).to.have.property('id');",
                  "    pm.expect(user).to.have.property('email');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"email\\\": \\\"{{random_email}}\\\",\\n  \\\"password\\\": \\\"SecurePass123!\\\"\\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "login"]
            }
          }
        },
        {
          "name": "User Login - Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401 Unauthorized', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message is generic for security', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson.error.message).to.not.include('email');",
                  "    pm.expect(responseJson.error.message).to.not.include('password');",
                  "});",
                  "",
                  "pm.test('No sensitive data in error response', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.not.have.property('user');",
                  "    pm.expect(responseJson).to.not.have.property('token');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"email\\\": \\\"nonexistent@example.com\\\",\\n  \\\"password\\\": \\\"WrongPassword123!\\\"\\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "login"]
            }
          }
        },
        {
          "name": "User Login - Missing Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 Bad Request', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation error for missing fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson.error).to.have.property('details');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"email\\\": \\\"test@example.com\\\"\\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "Profile Management Tests",
      "description": "User profile management test scenarios",
      "item": [
        {
          "name": "Get User Profile - Authenticated",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 OK', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile data is complete', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson.data).to.have.property('user');",
                  "    ",
                  "    const user = responseJson.data.user;",
                  "    pm.expect(user).to.have.property('id');",
                  "    pm.expect(user).to.have.property('email');",
                  "    pm.expect(user).to.have.property('username');",
                  "    pm.expect(user).to.have.property('firstName');",
                  "    pm.expect(user).to.have.property('lastName');",
                  "    pm.expect(user).to.have.property('role');",
                  "    pm.expect(user).to.have.property('createdAt');",
                  "    pm.expect(user).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Sensitive data is excluded', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const user = responseJson.data.user;",
                  "    ",
                  "    pm.expect(user).to.not.have.property('password');",
                  "    pm.expect(user).to.not.have.property('passwordHash');",
                  "    pm.expect(user).to.not.have.property('resetToken');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/users/{{test_user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "users", "{{test_user_id}}"]
            }
          }
        },
        {
          "name": "Get User Profile - Unauthenticated",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401 Unauthorized', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message indicates authentication required', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson.error.message).to.include('authentication');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/users/{{test_user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "users", "{{test_user_id}}"]
            }
          }
        },
        {
          "name": "Update User Profile - Valid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 OK', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson.data).to.have.property('user');",
                  "    ",
                  "    const user = responseJson.data.user;",
                  "    pm.expect(user.firstName).to.eql('Jane');",
                  "    pm.expect(user.lastName).to.eql('Smith');",
                  "});",
                  "",
                  "pm.test('Updated timestamp is recent', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const user = responseJson.data.user;",
                  "    const updatedAt = new Date(user.updatedAt);",
                  "    const now = new Date();",
                  "    const timeDiff = now - updatedAt;",
                  "    ",
                  "    // Updated within last 5 seconds",
                  "    pm.expect(timeDiff).to.be.below(5000);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"firstName\\\": \\\"Jane\\\",\\n  \\\"lastName\\\": \\\"Smith\\\",\\n  \\\"phoneNumber\\\": \\\"+1987654321\\\",\\n  \\\"dateOfBirth\\\": \\\"1992-05-15\\\"\\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/users/{{test_user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "users", "{{test_user_id}}"]
            }
          }
        },
        {
          "name": "Update User Profile - Invalid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 Bad Request', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Validation errors are returned', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson.error).to.have.property('details');",
                  "    pm.expect(responseJson.error.details).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"firstName\\\": \\\"\\\",\\n  \\\"lastName\\\": \\\"\\\",\\n  \\\"phoneNumber\\\": \\\"invalid-phone\\\",\\n  \\\"dateOfBirth\\\": \\\"invalid-date\\\"\\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/users/{{test_user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "users", "{{test_user_id}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Password Management Tests",
      "description": "Password change and reset test scenarios",
      "item": [
        {
          "name": "Change Password - Valid Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 OK', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Password changed successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});",
                  "",
                  "pm.test('No sensitive data in response', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.not.have.property('password');",
                  "    pm.expect(responseJson).to.not.have.property('newPassword');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"currentPassword\\\": \\\"SecurePass123!\\\",\\n  \\\"newPassword\\\": \\\"NewSecurePass456!\\\",\\n  \\\"confirmNewPassword\\\": \\\"NewSecurePass456!\\\"\\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/users/{{test_user_id}}/password",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "users", "{{test_user_id}}", "password"]
            }
          }
        },
        {
          "name": "Change Password - Wrong Current Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 Bad Request', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error indicates incorrect current password', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson.error.message).to.include('current password');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"currentPassword\\\": \\\"WrongPassword123!\\\",\\n  \\\"newPassword\\\": \\\"NewSecurePass456!\\\",\\n  \\\"confirmNewPassword\\\": \\\"NewSecurePass456!\\\"\\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/users/{{test_user_id}}/password",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "users", "{{test_user_id}}", "password"]
            }
          }
        },
        {
          "name": "Forgot Password Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 OK', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Reset email confirmation', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', true);",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});",
                  "",
                  "pm.test('No sensitive data exposed', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.not.have.property('resetToken');",
                  "    pm.expect(responseJson).to.not.have.property('user');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"email\\\": \\\"{{random_email}}\\\"\\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/forgot-password",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "forgot-password"]
            }
          }
        }
      ]
    },
    {
      "name": "Security Tests",
      "description": "Security-focused test scenarios",
      "item": [
        {
          "name": "SQL Injection Attempt - Registration",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 Bad Request', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('SQL injection is prevented', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    // Should not contain SQL error messages",
                  "    const responseText = JSON.stringify(responseJson).toLowerCase();",
                  "    pm.expect(responseText).to.not.include('sql');",
                  "    pm.expect(responseText).to.not.include('database');",
                  "    pm.expect(responseText).to.not.include('mysql');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"email\\\": \\\"test'; DROP TABLE users; --@example.com\\\",\\n  \\\"username\\\": \\\"testuser\\\",\\n  \\\"password\\\": \\\"SecurePass123!\\\",\\n  \\\"confirmPassword\\\": \\\"SecurePass123!\\\",\\n  \\\"firstName\\\": \\\"John\\\",\\n  \\\"lastName\\\": \\\"Doe\\\"\\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "register"]
            }
          }
        },
        {
          "name": "XSS Attempt - Profile Update",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 Bad Request', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('XSS payload is rejected', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('success', false);",
                  "    pm.expect(responseJson.error.message).to.include('invalid');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"firstName\\\": \\\"<script>alert('XSS')</script>\\\",\\n  \\\"lastName\\\": \\\"Smith\\\"\\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/users/{{test_user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "users", "{{test_user_id}}"]
            }
          }
        },
        {
          "name": "Rate Limiting Test",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// This test should be run multiple times rapidly to test rate limiting",
                  "console.log('Testing rate limiting - attempt #' + (pm.globals.get('rate_limit_attempt') || 1));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// After multiple rapid requests, should get rate limited",
                  "pm.test('Rate limiting is enforced', function () {",
                  "    // First few requests should succeed (200), later ones should be rate limited (429)",
                  "    const validStatuses = [200, 429];",
                  "    pm.expect(validStatuses).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 429) {",
                  "    pm.test('Rate limit headers are present', function () {",
                  "        pm.expect(pm.response.headers.get('X-RateLimit-Limit')).to.exist;",
                  "        pm.expect(pm.response.headers.get('X-RateLimit-Remaining')).to.exist;",
                  "        pm.expect(pm.response.headers.get('X-RateLimit-Reset')).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\\n  \\\"email\\\": \\\"rate.limit.test@example.com\\\",\\n  \\\"password\\\": \\\"WrongPassword123!\\\"\\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "login"]
            }
          }
        }
      ]
    }
  ]
}